#!/usr/bin/env python3

import sys
import re
import signal

# Handle broken pipe gracefully
signal.signal(signal.SIGPIPE, signal.SIG_DFL)

def print_usage(script_name):
    print(f"Usage: {script_name} [width] <filename>")
    print(f"Options:")
    print(f"  -n, --no-justify  Disable text justification")
    print(f"  -h, --help        Show this help")
    print(f"Examples:")
    print(f"  {script_name} kjv.txt")
    print(f"  {script_name} 80 kjv.txt")
    print(f"  {script_name} -n kjv.txt")

def justify_text(file_input, width=60, justify=True):
    # Read all lines first to check context
    lines = [line.rstrip() for line in file_input]
    total_lines = len(lines)

    for i, line in enumerate(lines):
        if not line.strip():
            print()
            continue

        # Check if line is surrounded by empty lines
        prev_empty = i == 0 or not lines[i-1].strip()
        next_empty = i == total_lines - 1 or not lines[i+1].strip()

        if prev_empty and next_empty:
            # Center with 4-space indent
            clean_line = line.strip()
            available_width = width - 4
            padding = (available_width - len(clean_line)) // 2
            if padding > 0:
                print(' ' * 4 + ' ' * padding + clean_line)
            else:
                print(' ' * 4 + clean_line)
            continue

        # Check if line starts with a verse number
        verse_match = re.match(r'^(\d+)\s+(.*)$', line)
        if verse_match:
            verse_num = verse_match.group(1)
            text_after_verse = verse_match.group(2)
            words = text_after_verse.split()

            if not words:
                print(line)
                continue

            # Add proper spacing based on verse number
            if len(verse_num) == 1:
                verse_prefix = "  " + verse_num
            elif len(verse_num) == 2:
                verse_prefix = " " + verse_num
            else:
                verse_prefix = verse_num

            # Calculate available width for the text
            available_width = width - len(verse_prefix) - 1

            # Build lines manually
            current_line = []
            current_len = 0
            is_first_line = True

            for word in words:
                if current_len + len(word) + len(current_line) <= available_width:
                    current_line.append(word)
                    current_len += len(word)
                else:
                    # Print current line (justified or regular)
                    if justify and len(current_line) > 1:
                        # Justify the line
                        spaces_needed = available_width - current_len
                        gaps = len(current_line) - 1
                        spaces_per_gap = spaces_needed // gaps
                        extra_spaces = spaces_needed % gaps

                        justified = current_line[0]
                        for j in range(1, len(current_line)):
                            spaces = spaces_per_gap + (1 if j <= extra_spaces else 0)
                            justified += ' ' * spaces + current_line[j]

                        if is_first_line:
                            print(f"{verse_prefix} {justified}")
                            is_first_line = False
                        else:
                            print(" " * (len(verse_prefix) + 1) + justified)
                    else:
                        # Regular line (no justification)
                        line_text = ' '.join(current_line)
                        if is_first_line:
                            print(f"{verse_prefix} {line_text}")
                            is_first_line = False
                        else:
                            print(" " * (len(verse_prefix) + 1) + line_text)

                    current_line = [word]
                    current_len = len(word)

            # Print last line
            if current_line:
                line_text = ' '.join(current_line)
                if is_first_line:
                    print(f"{verse_prefix} {line_text}")
                else:
                    print(" " * (len(verse_prefix) + 1) + line_text)
        else:
            # Regular text - just print as is with 4-space indent
            print(' ' * 4 + line)

if __name__ == "__main__":
    # If no arguments provided, print help and exit
    if len(sys.argv) == 1:
        print_usage(sys.argv[0])
        sys.exit(0)

    width = 60
    filename = None
    justify = True

    # Parse arguments
    i = 1
    while i < len(sys.argv):
        arg = sys.argv[i]
        if arg.isdigit():
            width = int(arg)
        elif arg in ['-n', '--no-justify']:
            justify = False
        elif arg in ['-h', '--help', 'help']:
            print_usage(sys.argv[0])
            sys.exit(0)
        else:
            filename = arg

        i += 1

    if not filename:
        print("Error: No filename provided")
        print_usage(sys.argv[0])
        sys.exit(1)

    try:
        with open(filename, 'r', encoding='utf-8') as f:
            justify_text(f, width, justify)
    except FileNotFoundError:
        print(f"Error: File '{filename}' not found")
        sys.exit(1)
    except Exception as e:
        print(f"Error reading file: {e}")
        sys.exit(1)
